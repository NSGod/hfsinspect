//
// Prefix header for all source files of the 'hfsinspect' target in the 'hfsinspect' project
//

#define _assert( condition ) { if ( ! (condition) ) { critical("%s:%d assertation failed: %s", __FILE__, __LINE__, #condition); exit(1); } }

#define _UNUSED     __attribute__((unused))
#define _NONNULL    __attribute__((nonnull))
#define NONNULL(...) __attribute__((nonnull(__VA_ARGS__)))

#include <unistd.h>
#include <stdlib.h>             // ANSI C
#include <stdio.h>
#include <errno.h>              // errno/perror
#include <assert.h>             // assert()
#include <string.h>
#include <strings.h>            // memcpy, strXXX, etc.

#if defined(__APPLE__)
#include <malloc/malloc.h>      // malloc_size
#endif

#if defined(__linux__)

#include <malloc.h>
#define malloc_size malloc_usable_size

#ifndef _UUID_STRING_T
#define _UUID_STRING_T
typedef char	uuid_string_t[37];
#endif /* _UUID_STRING_T */

#include <bsd/string.h>     // strlcpy, etc.
#include <bsd/sys/queue.h>  // TAILQ

#endif // linux

#include "logging/logging.h"    // console printing routines
#include "misc/utilities.h"     // commonly-used utility functions

// Tired of typing this? Me too.
#ifndef FOR_UNTIL
#define FOR_UNTIL(var, end) for(int var = 0; var < end; var++)
#endif

// This, too.
#ifndef ZERO_STRUCT
#define ZERO_STRUCT(name) memset(&(name), 0, sizeof((name)))
#endif

// And this.
#ifndef ALLOC
#define ALLOC(name, size) { (name) = calloc((size), 1); if ((name) == NULL) { perror("calloc"); exit(errno); }; }
#endif

// Also this.
#ifndef FREE
#define FREE(name) { free((name)); (name) = NULL; }
#endif
